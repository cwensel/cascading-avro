/**
 * Autogenerated by Avro
 * <p>
 * DO NOT EDIT DIRECTLY
 */
package cascading.avro;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;

@org.apache.avro.specific.AvroGenerated
public class test3 extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 8424276152002007870L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"test3\",\"namespace\":\"cascading.avro\",\"fields\":[{\"name\":\"aMapToListOfInt\",\"type\":{\"type\":\"map\",\"values\":{\"type\":\"array\",\"items\":\"int\"}}},{\"name\":\"aMapToMapToLong\",\"type\":{\"type\":\"map\",\"values\":{\"type\":\"map\",\"values\":\"long\"}}}]}");

  public static org.apache.avro.Schema getClassSchema() {
    return SCHEMA$;
  }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<test3> ENCODER =
          new BinaryMessageEncoder<test3>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<test3> DECODER =
          new BinaryMessageDecoder<test3>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   *
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<test3> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   *
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<test3> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   *
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<test3> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<test3>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this test3 to a ByteBuffer.
   *
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a test3 from a ByteBuffer.
   *
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a test3 instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static test3 fromByteBuffer(
          java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.util.Map<java.lang.CharSequence, java.util.List<java.lang.Integer>> aMapToListOfInt;
  private java.util.Map<java.lang.CharSequence, java.util.Map<java.lang.CharSequence, java.lang.Long>> aMapToMapToLong;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public test3() {
  }

  /**
   * All-args constructor.
   *
   * @param aMapToListOfInt The new value for aMapToListOfInt
   * @param aMapToMapToLong The new value for aMapToMapToLong
   */
  public test3(java.util.Map<java.lang.CharSequence, java.util.List<java.lang.Integer>> aMapToListOfInt, java.util.Map<java.lang.CharSequence, java.util.Map<java.lang.CharSequence, java.lang.Long>> aMapToMapToLong) {
    this.aMapToListOfInt = aMapToListOfInt;
    this.aMapToMapToLong = aMapToMapToLong;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() {
    return MODEL$;
  }

  public org.apache.avro.Schema getSchema() {
    return SCHEMA$;
  }

  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
      case 0:
        return aMapToListOfInt;
      case 1:
        return aMapToMapToLong;
      default:
        throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value = "unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
      case 0:
        aMapToListOfInt = (java.util.Map<java.lang.CharSequence, java.util.List<java.lang.Integer>>) value$;
        break;
      case 1:
        aMapToMapToLong = (java.util.Map<java.lang.CharSequence, java.util.Map<java.lang.CharSequence, java.lang.Long>>) value$;
        break;
      default:
        throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'aMapToListOfInt' field.
   *
   * @return The value of the 'aMapToListOfInt' field.
   */
  public java.util.Map<java.lang.CharSequence, java.util.List<java.lang.Integer>> getAMapToListOfInt() {
    return aMapToListOfInt;
  }


  /**
   * Sets the value of the 'aMapToListOfInt' field.
   *
   * @param value the value to set.
   */
  public void setAMapToListOfInt(java.util.Map<java.lang.CharSequence, java.util.List<java.lang.Integer>> value) {
    this.aMapToListOfInt = value;
  }

  /**
   * Gets the value of the 'aMapToMapToLong' field.
   *
   * @return The value of the 'aMapToMapToLong' field.
   */
  public java.util.Map<java.lang.CharSequence, java.util.Map<java.lang.CharSequence, java.lang.Long>> getAMapToMapToLong() {
    return aMapToMapToLong;
  }


  /**
   * Sets the value of the 'aMapToMapToLong' field.
   *
   * @param value the value to set.
   */
  public void setAMapToMapToLong(java.util.Map<java.lang.CharSequence, java.util.Map<java.lang.CharSequence, java.lang.Long>> value) {
    this.aMapToMapToLong = value;
  }

  /**
   * Creates a new test3 RecordBuilder.
   *
   * @return A new test3 RecordBuilder
   */
  public static cascading.avro.test3.Builder newBuilder() {
    return new cascading.avro.test3.Builder();
  }

  /**
   * Creates a new test3 RecordBuilder by copying an existing Builder.
   *
   * @param other The existing builder to copy.
   * @return A new test3 RecordBuilder
   */
  public static cascading.avro.test3.Builder newBuilder(cascading.avro.test3.Builder other) {
    if (other == null) {
      return new cascading.avro.test3.Builder();
    } else {
      return new cascading.avro.test3.Builder(other);
    }
  }

  /**
   * Creates a new test3 RecordBuilder by copying an existing test3 instance.
   *
   * @param other The existing instance to copy.
   * @return A new test3 RecordBuilder
   */
  public static cascading.avro.test3.Builder newBuilder(cascading.avro.test3 other) {
    if (other == null) {
      return new cascading.avro.test3.Builder();
    } else {
      return new cascading.avro.test3.Builder(other);
    }
  }

  /**
   * RecordBuilder for test3 instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<test3>
          implements org.apache.avro.data.RecordBuilder<test3> {

    private java.util.Map<java.lang.CharSequence, java.util.List<java.lang.Integer>> aMapToListOfInt;
    private java.util.Map<java.lang.CharSequence, java.util.Map<java.lang.CharSequence, java.lang.Long>> aMapToMapToLong;

    /**
     * Creates a new Builder
     */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     *
     * @param other The existing Builder to copy.
     */
    private Builder(cascading.avro.test3.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.aMapToListOfInt)) {
        this.aMapToListOfInt = data().deepCopy(fields()[0].schema(), other.aMapToListOfInt);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.aMapToMapToLong)) {
        this.aMapToMapToLong = data().deepCopy(fields()[1].schema(), other.aMapToMapToLong);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
    }

    /**
     * Creates a Builder by copying an existing test3 instance
     *
     * @param other The existing instance to copy.
     */
    private Builder(cascading.avro.test3 other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.aMapToListOfInt)) {
        this.aMapToListOfInt = data().deepCopy(fields()[0].schema(), other.aMapToListOfInt);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.aMapToMapToLong)) {
        this.aMapToMapToLong = data().deepCopy(fields()[1].schema(), other.aMapToMapToLong);
        fieldSetFlags()[1] = true;
      }
    }

    /**
     * Gets the value of the 'aMapToListOfInt' field.
     *
     * @return The value.
     */
    public java.util.Map<java.lang.CharSequence, java.util.List<java.lang.Integer>> getAMapToListOfInt() {
      return aMapToListOfInt;
    }


    /**
     * Sets the value of the 'aMapToListOfInt' field.
     *
     * @param value The value of 'aMapToListOfInt'.
     * @return This builder.
     */
    public cascading.avro.test3.Builder setAMapToListOfInt(java.util.Map<java.lang.CharSequence, java.util.List<java.lang.Integer>> value) {
      validate(fields()[0], value);
      this.aMapToListOfInt = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
     * Checks whether the 'aMapToListOfInt' field has been set.
     *
     * @return True if the 'aMapToListOfInt' field has been set, false otherwise.
     */
    public boolean hasAMapToListOfInt() {
      return fieldSetFlags()[0];
    }


    /**
     * Clears the value of the 'aMapToListOfInt' field.
     *
     * @return This builder.
     */
    public cascading.avro.test3.Builder clearAMapToListOfInt() {
      aMapToListOfInt = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
     * Gets the value of the 'aMapToMapToLong' field.
     *
     * @return The value.
     */
    public java.util.Map<java.lang.CharSequence, java.util.Map<java.lang.CharSequence, java.lang.Long>> getAMapToMapToLong() {
      return aMapToMapToLong;
    }


    /**
     * Sets the value of the 'aMapToMapToLong' field.
     *
     * @param value The value of 'aMapToMapToLong'.
     * @return This builder.
     */
    public cascading.avro.test3.Builder setAMapToMapToLong(java.util.Map<java.lang.CharSequence, java.util.Map<java.lang.CharSequence, java.lang.Long>> value) {
      validate(fields()[1], value);
      this.aMapToMapToLong = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
     * Checks whether the 'aMapToMapToLong' field has been set.
     *
     * @return True if the 'aMapToMapToLong' field has been set, false otherwise.
     */
    public boolean hasAMapToMapToLong() {
      return fieldSetFlags()[1];
    }


    /**
     * Clears the value of the 'aMapToMapToLong' field.
     *
     * @return This builder.
     */
    public cascading.avro.test3.Builder clearAMapToMapToLong() {
      aMapToMapToLong = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public test3 build() {
      try {
        test3 record = new test3();
        record.aMapToListOfInt = fieldSetFlags()[0] ? this.aMapToListOfInt : (java.util.Map<java.lang.CharSequence, java.util.List<java.lang.Integer>>) defaultValue(fields()[0]);
        record.aMapToMapToLong = fieldSetFlags()[1] ? this.aMapToMapToLong : (java.util.Map<java.lang.CharSequence, java.util.Map<java.lang.CharSequence, java.lang.Long>>) defaultValue(fields()[1]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<test3>
          WRITER$ = (org.apache.avro.io.DatumWriter<test3>) MODEL$.createDatumWriter(SCHEMA$);

  @Override
  public void writeExternal(java.io.ObjectOutput out)
          throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<test3>
          READER$ = (org.apache.avro.io.DatumReader<test3>) MODEL$.createDatumReader(SCHEMA$);

  @Override
  public void readExternal(java.io.ObjectInput in)
          throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override
  protected boolean hasCustomCoders() {
    return true;
  }

  @Override
  public void customEncode(org.apache.avro.io.Encoder out)
          throws java.io.IOException {
    long size0 = this.aMapToListOfInt.size();
    out.writeMapStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (java.util.Map.Entry<java.lang.CharSequence, java.util.List<java.lang.Integer>> e0 : this.aMapToListOfInt.entrySet()) {
      actualSize0++;
      out.startItem();
      out.writeString(e0.getKey());
      java.util.List<java.lang.Integer> v0 = e0.getValue();
      long size1 = v0.size();
      out.writeArrayStart();
      out.setItemCount(size1);
      long actualSize1 = 0;
      for (java.lang.Integer e1 : v0) {
        actualSize1++;
        out.startItem();
        out.writeInt(e1);
      }
      out.writeArrayEnd();
      if (actualSize1 != size1)
        throw new java.util.ConcurrentModificationException("Array-size written was " + size1 + ", but element count was " + actualSize1 + ".");
    }
    out.writeMapEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Map-size written was " + size0 + ", but element count was " + actualSize0 + ".");

    long size2 = this.aMapToMapToLong.size();
    out.writeMapStart();
    out.setItemCount(size2);
    long actualSize2 = 0;
    for (java.util.Map.Entry<java.lang.CharSequence, java.util.Map<java.lang.CharSequence, java.lang.Long>> e2 : this.aMapToMapToLong.entrySet()) {
      actualSize2++;
      out.startItem();
      out.writeString(e2.getKey());
      java.util.Map<java.lang.CharSequence, java.lang.Long> v2 = e2.getValue();
      long size3 = v2.size();
      out.writeMapStart();
      out.setItemCount(size3);
      long actualSize3 = 0;
      for (java.util.Map.Entry<java.lang.CharSequence, java.lang.Long> e3 : v2.entrySet()) {
        actualSize3++;
        out.startItem();
        out.writeString(e3.getKey());
        java.lang.Long v3 = e3.getValue();
        out.writeLong(v3);
      }
      out.writeMapEnd();
      if (actualSize3 != size3)
        throw new java.util.ConcurrentModificationException("Map-size written was " + size3 + ", but element count was " + actualSize3 + ".");
    }
    out.writeMapEnd();
    if (actualSize2 != size2)
      throw new java.util.ConcurrentModificationException("Map-size written was " + size2 + ", but element count was " + actualSize2 + ".");

  }

  @Override
  public void customDecode(org.apache.avro.io.ResolvingDecoder in)
          throws java.io.IOException {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      long size0 = in.readMapStart();
      java.util.Map<java.lang.CharSequence, java.util.List<java.lang.Integer>> m0 = this.aMapToListOfInt; // Need fresh name due to limitation of macro system
      if (m0 == null) {
        m0 = new java.util.HashMap<java.lang.CharSequence, java.util.List<java.lang.Integer>>((int) size0);
        this.aMapToListOfInt = m0;
      } else m0.clear();
      for (; 0 < size0; size0 = in.mapNext()) {
        for (; size0 != 0; size0--) {
          java.lang.CharSequence k0 = null;
          k0 = in.readString(k0 instanceof Utf8 ? (Utf8) k0 : null);
          java.util.List<java.lang.Integer> v0 = null;
          long size1 = in.readArrayStart();
          java.util.List<java.lang.Integer> a1 = v0;
          if (a1 == null) {
            a1 = new SpecificData.Array<java.lang.Integer>((int) size1, SCHEMA$.getField("aMapToListOfInt").schema().getValueType());
            v0 = a1;
          } else a1.clear();
          SpecificData.Array<java.lang.Integer> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Integer>) a1 : null);
          for (; 0 < size1; size1 = in.arrayNext()) {
            for (; size1 != 0; size1--) {
              java.lang.Integer e1 = (ga1 != null ? ga1.peek() : null);
              e1 = in.readInt();
              a1.add(e1);
            }
          }
          m0.put(k0, v0);
        }
      }

      long size2 = in.readMapStart();
      java.util.Map<java.lang.CharSequence, java.util.Map<java.lang.CharSequence, java.lang.Long>> m2 = this.aMapToMapToLong; // Need fresh name due to limitation of macro system
      if (m2 == null) {
        m2 = new java.util.HashMap<java.lang.CharSequence, java.util.Map<java.lang.CharSequence, java.lang.Long>>((int) size2);
        this.aMapToMapToLong = m2;
      } else m2.clear();
      for (; 0 < size2; size2 = in.mapNext()) {
        for (; size2 != 0; size2--) {
          java.lang.CharSequence k2 = null;
          k2 = in.readString(k2 instanceof Utf8 ? (Utf8) k2 : null);
          java.util.Map<java.lang.CharSequence, java.lang.Long> v2 = null;
          long size3 = in.readMapStart();
          java.util.Map<java.lang.CharSequence, java.lang.Long> m3 = v2; // Need fresh name due to limitation of macro system
          if (m3 == null) {
            m3 = new java.util.HashMap<java.lang.CharSequence, java.lang.Long>((int) size3);
            v2 = m3;
          } else m3.clear();
          for (; 0 < size3; size3 = in.mapNext()) {
            for (; size3 != 0; size3--) {
              java.lang.CharSequence k3 = null;
              k3 = in.readString(k3 instanceof Utf8 ? (Utf8) k3 : null);
              java.lang.Long v3 = null;
              v3 = in.readLong();
              m3.put(k3, v3);
            }
          }
          m2.put(k2, v2);
        }
      }

    } else {
      for (int i = 0; i < 2; i++) {
        switch (fieldOrder[i].pos()) {
          case 0:
            long size0 = in.readMapStart();
            java.util.Map<java.lang.CharSequence, java.util.List<java.lang.Integer>> m0 = this.aMapToListOfInt; // Need fresh name due to limitation of macro system
            if (m0 == null) {
              m0 = new java.util.HashMap<java.lang.CharSequence, java.util.List<java.lang.Integer>>((int) size0);
              this.aMapToListOfInt = m0;
            } else m0.clear();
            for (; 0 < size0; size0 = in.mapNext()) {
              for (; size0 != 0; size0--) {
                java.lang.CharSequence k0 = null;
                k0 = in.readString(k0 instanceof Utf8 ? (Utf8) k0 : null);
                java.util.List<java.lang.Integer> v0 = null;
                long size1 = in.readArrayStart();
                java.util.List<java.lang.Integer> a1 = v0;
                if (a1 == null) {
                  a1 = new SpecificData.Array<java.lang.Integer>((int) size1, SCHEMA$.getField("aMapToListOfInt").schema().getValueType());
                  v0 = a1;
                } else a1.clear();
                SpecificData.Array<java.lang.Integer> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Integer>) a1 : null);
                for (; 0 < size1; size1 = in.arrayNext()) {
                  for (; size1 != 0; size1--) {
                    java.lang.Integer e1 = (ga1 != null ? ga1.peek() : null);
                    e1 = in.readInt();
                    a1.add(e1);
                  }
                }
                m0.put(k0, v0);
              }
            }
            break;

          case 1:
            long size2 = in.readMapStart();
            java.util.Map<java.lang.CharSequence, java.util.Map<java.lang.CharSequence, java.lang.Long>> m2 = this.aMapToMapToLong; // Need fresh name due to limitation of macro system
            if (m2 == null) {
              m2 = new java.util.HashMap<java.lang.CharSequence, java.util.Map<java.lang.CharSequence, java.lang.Long>>((int) size2);
              this.aMapToMapToLong = m2;
            } else m2.clear();
            for (; 0 < size2; size2 = in.mapNext()) {
              for (; size2 != 0; size2--) {
                java.lang.CharSequence k2 = null;
                k2 = in.readString(k2 instanceof Utf8 ? (Utf8) k2 : null);
                java.util.Map<java.lang.CharSequence, java.lang.Long> v2 = null;
                long size3 = in.readMapStart();
                java.util.Map<java.lang.CharSequence, java.lang.Long> m3 = v2; // Need fresh name due to limitation of macro system
                if (m3 == null) {
                  m3 = new java.util.HashMap<java.lang.CharSequence, java.lang.Long>((int) size3);
                  v2 = m3;
                } else m3.clear();
                for (; 0 < size3; size3 = in.mapNext()) {
                  for (; size3 != 0; size3--) {
                    java.lang.CharSequence k3 = null;
                    k3 = in.readString(k3 instanceof Utf8 ? (Utf8) k3 : null);
                    java.lang.Long v3 = null;
                    v3 = in.readLong();
                    m3.put(k3, v3);
                  }
                }
                m2.put(k2, v2);
              }
            }
            break;

          default:
            throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










