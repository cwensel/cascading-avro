/**
 * Autogenerated by Avro
 * <p>
 * DO NOT EDIT DIRECTLY
 */
package cascading.avro;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;

@org.apache.avro.specific.AvroGenerated
public class test5 extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 6894061873424002360L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"test5\",\"namespace\":\"cascading.avro\",\"fields\":[{\"name\":\"aBoolean\",\"type\":\"boolean\",\"default\":true},{\"name\":\"anInt\",\"type\":\"int\",\"default\":123},{\"name\":\"aLong\",\"type\":\"long\",\"default\":1},{\"name\":\"aFloat\",\"type\":\"float\",\"default\":0.1},{\"name\":\"aDouble\",\"type\":\"double\",\"default\":110.1},{\"name\":\"aString\",\"type\":[\"string\",\"null\"],\"default\":\"foobar\"},{\"name\":\"aBytes\",\"type\":\"bytes\"},{\"name\":\"aFixed\",\"type\":{\"type\":\"fixed\",\"name\":\"md5\",\"size\":16}},{\"name\":\"aList\",\"type\":{\"type\":\"array\",\"items\":\"int\"}},{\"name\":\"aMap\",\"type\":{\"type\":\"map\",\"values\":\"int\"}},{\"name\":\"aUnion\",\"type\":[\"null\",\"int\"]}]}");

  public static org.apache.avro.Schema getClassSchema() {
    return SCHEMA$;
  }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<test5> ENCODER =
          new BinaryMessageEncoder<test5>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<test5> DECODER =
          new BinaryMessageDecoder<test5>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   *
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<test5> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   *
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<test5> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   *
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<test5> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<test5>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this test5 to a ByteBuffer.
   *
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a test5 from a ByteBuffer.
   *
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a test5 instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static test5 fromByteBuffer(
          java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private boolean aBoolean;
  private int anInt;
  private long aLong;
  private float aFloat;
  private double aDouble;
  private java.lang.CharSequence aString;
  private java.nio.ByteBuffer aBytes;
  private cascading.avro.md5 aFixed;
  private java.util.List<java.lang.Integer> aList;
  private java.util.Map<java.lang.CharSequence, java.lang.Integer> aMap;
  private java.lang.Integer aUnion;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public test5() {
  }

  /**
   * All-args constructor.
   *
   * @param aBoolean The new value for aBoolean
   * @param anInt    The new value for anInt
   * @param aLong    The new value for aLong
   * @param aFloat   The new value for aFloat
   * @param aDouble  The new value for aDouble
   * @param aString  The new value for aString
   * @param aBytes   The new value for aBytes
   * @param aFixed   The new value for aFixed
   * @param aList    The new value for aList
   * @param aMap     The new value for aMap
   * @param aUnion   The new value for aUnion
   */
  public test5(java.lang.Boolean aBoolean, java.lang.Integer anInt, java.lang.Long aLong, java.lang.Float aFloat, java.lang.Double aDouble, java.lang.CharSequence aString, java.nio.ByteBuffer aBytes, cascading.avro.md5 aFixed, java.util.List<java.lang.Integer> aList, java.util.Map<java.lang.CharSequence, java.lang.Integer> aMap, java.lang.Integer aUnion) {
    this.aBoolean = aBoolean;
    this.anInt = anInt;
    this.aLong = aLong;
    this.aFloat = aFloat;
    this.aDouble = aDouble;
    this.aString = aString;
    this.aBytes = aBytes;
    this.aFixed = aFixed;
    this.aList = aList;
    this.aMap = aMap;
    this.aUnion = aUnion;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() {
    return MODEL$;
  }

  public org.apache.avro.Schema getSchema() {
    return SCHEMA$;
  }

  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
      case 0:
        return aBoolean;
      case 1:
        return anInt;
      case 2:
        return aLong;
      case 3:
        return aFloat;
      case 4:
        return aDouble;
      case 5:
        return aString;
      case 6:
        return aBytes;
      case 7:
        return aFixed;
      case 8:
        return aList;
      case 9:
        return aMap;
      case 10:
        return aUnion;
      default:
        throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value = "unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
      case 0:
        aBoolean = (java.lang.Boolean) value$;
        break;
      case 1:
        anInt = (java.lang.Integer) value$;
        break;
      case 2:
        aLong = (java.lang.Long) value$;
        break;
      case 3:
        aFloat = (java.lang.Float) value$;
        break;
      case 4:
        aDouble = (java.lang.Double) value$;
        break;
      case 5:
        aString = (java.lang.CharSequence) value$;
        break;
      case 6:
        aBytes = (java.nio.ByteBuffer) value$;
        break;
      case 7:
        aFixed = (cascading.avro.md5) value$;
        break;
      case 8:
        aList = (java.util.List<java.lang.Integer>) value$;
        break;
      case 9:
        aMap = (java.util.Map<java.lang.CharSequence, java.lang.Integer>) value$;
        break;
      case 10:
        aUnion = (java.lang.Integer) value$;
        break;
      default:
        throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'aBoolean' field.
   *
   * @return The value of the 'aBoolean' field.
   */
  public boolean getABoolean() {
    return aBoolean;
  }


  /**
   * Sets the value of the 'aBoolean' field.
   *
   * @param value the value to set.
   */
  public void setABoolean(boolean value) {
    this.aBoolean = value;
  }

  /**
   * Gets the value of the 'anInt' field.
   *
   * @return The value of the 'anInt' field.
   */
  public int getAnInt() {
    return anInt;
  }


  /**
   * Sets the value of the 'anInt' field.
   *
   * @param value the value to set.
   */
  public void setAnInt(int value) {
    this.anInt = value;
  }

  /**
   * Gets the value of the 'aLong' field.
   *
   * @return The value of the 'aLong' field.
   */
  public long getALong() {
    return aLong;
  }


  /**
   * Sets the value of the 'aLong' field.
   *
   * @param value the value to set.
   */
  public void setALong(long value) {
    this.aLong = value;
  }

  /**
   * Gets the value of the 'aFloat' field.
   *
   * @return The value of the 'aFloat' field.
   */
  public float getAFloat() {
    return aFloat;
  }


  /**
   * Sets the value of the 'aFloat' field.
   *
   * @param value the value to set.
   */
  public void setAFloat(float value) {
    this.aFloat = value;
  }

  /**
   * Gets the value of the 'aDouble' field.
   *
   * @return The value of the 'aDouble' field.
   */
  public double getADouble() {
    return aDouble;
  }


  /**
   * Sets the value of the 'aDouble' field.
   *
   * @param value the value to set.
   */
  public void setADouble(double value) {
    this.aDouble = value;
  }

  /**
   * Gets the value of the 'aString' field.
   *
   * @return The value of the 'aString' field.
   */
  public java.lang.CharSequence getAString() {
    return aString;
  }


  /**
   * Sets the value of the 'aString' field.
   *
   * @param value the value to set.
   */
  public void setAString(java.lang.CharSequence value) {
    this.aString = value;
  }

  /**
   * Gets the value of the 'aBytes' field.
   *
   * @return The value of the 'aBytes' field.
   */
  public java.nio.ByteBuffer getABytes() {
    return aBytes;
  }


  /**
   * Sets the value of the 'aBytes' field.
   *
   * @param value the value to set.
   */
  public void setABytes(java.nio.ByteBuffer value) {
    this.aBytes = value;
  }

  /**
   * Gets the value of the 'aFixed' field.
   *
   * @return The value of the 'aFixed' field.
   */
  public cascading.avro.md5 getAFixed() {
    return aFixed;
  }


  /**
   * Sets the value of the 'aFixed' field.
   *
   * @param value the value to set.
   */
  public void setAFixed(cascading.avro.md5 value) {
    this.aFixed = value;
  }

  /**
   * Gets the value of the 'aList' field.
   *
   * @return The value of the 'aList' field.
   */
  public java.util.List<java.lang.Integer> getAList() {
    return aList;
  }


  /**
   * Sets the value of the 'aList' field.
   *
   * @param value the value to set.
   */
  public void setAList(java.util.List<java.lang.Integer> value) {
    this.aList = value;
  }

  /**
   * Gets the value of the 'aMap' field.
   *
   * @return The value of the 'aMap' field.
   */
  public java.util.Map<java.lang.CharSequence, java.lang.Integer> getAMap() {
    return aMap;
  }


  /**
   * Sets the value of the 'aMap' field.
   *
   * @param value the value to set.
   */
  public void setAMap(java.util.Map<java.lang.CharSequence, java.lang.Integer> value) {
    this.aMap = value;
  }

  /**
   * Gets the value of the 'aUnion' field.
   *
   * @return The value of the 'aUnion' field.
   */
  public java.lang.Integer getAUnion() {
    return aUnion;
  }


  /**
   * Sets the value of the 'aUnion' field.
   *
   * @param value the value to set.
   */
  public void setAUnion(java.lang.Integer value) {
    this.aUnion = value;
  }

  /**
   * Creates a new test5 RecordBuilder.
   *
   * @return A new test5 RecordBuilder
   */
  public static cascading.avro.test5.Builder newBuilder() {
    return new cascading.avro.test5.Builder();
  }

  /**
   * Creates a new test5 RecordBuilder by copying an existing Builder.
   *
   * @param other The existing builder to copy.
   * @return A new test5 RecordBuilder
   */
  public static cascading.avro.test5.Builder newBuilder(cascading.avro.test5.Builder other) {
    if (other == null) {
      return new cascading.avro.test5.Builder();
    } else {
      return new cascading.avro.test5.Builder(other);
    }
  }

  /**
   * Creates a new test5 RecordBuilder by copying an existing test5 instance.
   *
   * @param other The existing instance to copy.
   * @return A new test5 RecordBuilder
   */
  public static cascading.avro.test5.Builder newBuilder(cascading.avro.test5 other) {
    if (other == null) {
      return new cascading.avro.test5.Builder();
    } else {
      return new cascading.avro.test5.Builder(other);
    }
  }

  /**
   * RecordBuilder for test5 instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<test5>
          implements org.apache.avro.data.RecordBuilder<test5> {

    private boolean aBoolean;
    private int anInt;
    private long aLong;
    private float aFloat;
    private double aDouble;
    private java.lang.CharSequence aString;
    private java.nio.ByteBuffer aBytes;
    private cascading.avro.md5 aFixed;
    private java.util.List<java.lang.Integer> aList;
    private java.util.Map<java.lang.CharSequence, java.lang.Integer> aMap;
    private java.lang.Integer aUnion;

    /**
     * Creates a new Builder
     */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     *
     * @param other The existing Builder to copy.
     */
    private Builder(cascading.avro.test5.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.aBoolean)) {
        this.aBoolean = data().deepCopy(fields()[0].schema(), other.aBoolean);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.anInt)) {
        this.anInt = data().deepCopy(fields()[1].schema(), other.anInt);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.aLong)) {
        this.aLong = data().deepCopy(fields()[2].schema(), other.aLong);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.aFloat)) {
        this.aFloat = data().deepCopy(fields()[3].schema(), other.aFloat);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.aDouble)) {
        this.aDouble = data().deepCopy(fields()[4].schema(), other.aDouble);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.aString)) {
        this.aString = data().deepCopy(fields()[5].schema(), other.aString);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.aBytes)) {
        this.aBytes = data().deepCopy(fields()[6].schema(), other.aBytes);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.aFixed)) {
        this.aFixed = data().deepCopy(fields()[7].schema(), other.aFixed);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.aList)) {
        this.aList = data().deepCopy(fields()[8].schema(), other.aList);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.aMap)) {
        this.aMap = data().deepCopy(fields()[9].schema(), other.aMap);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.aUnion)) {
        this.aUnion = data().deepCopy(fields()[10].schema(), other.aUnion);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
    }

    /**
     * Creates a Builder by copying an existing test5 instance
     *
     * @param other The existing instance to copy.
     */
    private Builder(cascading.avro.test5 other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.aBoolean)) {
        this.aBoolean = data().deepCopy(fields()[0].schema(), other.aBoolean);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.anInt)) {
        this.anInt = data().deepCopy(fields()[1].schema(), other.anInt);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.aLong)) {
        this.aLong = data().deepCopy(fields()[2].schema(), other.aLong);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.aFloat)) {
        this.aFloat = data().deepCopy(fields()[3].schema(), other.aFloat);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.aDouble)) {
        this.aDouble = data().deepCopy(fields()[4].schema(), other.aDouble);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.aString)) {
        this.aString = data().deepCopy(fields()[5].schema(), other.aString);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.aBytes)) {
        this.aBytes = data().deepCopy(fields()[6].schema(), other.aBytes);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.aFixed)) {
        this.aFixed = data().deepCopy(fields()[7].schema(), other.aFixed);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.aList)) {
        this.aList = data().deepCopy(fields()[8].schema(), other.aList);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.aMap)) {
        this.aMap = data().deepCopy(fields()[9].schema(), other.aMap);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.aUnion)) {
        this.aUnion = data().deepCopy(fields()[10].schema(), other.aUnion);
        fieldSetFlags()[10] = true;
      }
    }

    /**
     * Gets the value of the 'aBoolean' field.
     *
     * @return The value.
     */
    public boolean getABoolean() {
      return aBoolean;
    }


    /**
     * Sets the value of the 'aBoolean' field.
     *
     * @param value The value of 'aBoolean'.
     * @return This builder.
     */
    public cascading.avro.test5.Builder setABoolean(boolean value) {
      validate(fields()[0], value);
      this.aBoolean = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
     * Checks whether the 'aBoolean' field has been set.
     *
     * @return True if the 'aBoolean' field has been set, false otherwise.
     */
    public boolean hasABoolean() {
      return fieldSetFlags()[0];
    }


    /**
     * Clears the value of the 'aBoolean' field.
     *
     * @return This builder.
     */
    public cascading.avro.test5.Builder clearABoolean() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
     * Gets the value of the 'anInt' field.
     *
     * @return The value.
     */
    public int getAnInt() {
      return anInt;
    }


    /**
     * Sets the value of the 'anInt' field.
     *
     * @param value The value of 'anInt'.
     * @return This builder.
     */
    public cascading.avro.test5.Builder setAnInt(int value) {
      validate(fields()[1], value);
      this.anInt = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
     * Checks whether the 'anInt' field has been set.
     *
     * @return True if the 'anInt' field has been set, false otherwise.
     */
    public boolean hasAnInt() {
      return fieldSetFlags()[1];
    }


    /**
     * Clears the value of the 'anInt' field.
     *
     * @return This builder.
     */
    public cascading.avro.test5.Builder clearAnInt() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
     * Gets the value of the 'aLong' field.
     *
     * @return The value.
     */
    public long getALong() {
      return aLong;
    }


    /**
     * Sets the value of the 'aLong' field.
     *
     * @param value The value of 'aLong'.
     * @return This builder.
     */
    public cascading.avro.test5.Builder setALong(long value) {
      validate(fields()[2], value);
      this.aLong = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
     * Checks whether the 'aLong' field has been set.
     *
     * @return True if the 'aLong' field has been set, false otherwise.
     */
    public boolean hasALong() {
      return fieldSetFlags()[2];
    }


    /**
     * Clears the value of the 'aLong' field.
     *
     * @return This builder.
     */
    public cascading.avro.test5.Builder clearALong() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
     * Gets the value of the 'aFloat' field.
     *
     * @return The value.
     */
    public float getAFloat() {
      return aFloat;
    }


    /**
     * Sets the value of the 'aFloat' field.
     *
     * @param value The value of 'aFloat'.
     * @return This builder.
     */
    public cascading.avro.test5.Builder setAFloat(float value) {
      validate(fields()[3], value);
      this.aFloat = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
     * Checks whether the 'aFloat' field has been set.
     *
     * @return True if the 'aFloat' field has been set, false otherwise.
     */
    public boolean hasAFloat() {
      return fieldSetFlags()[3];
    }


    /**
     * Clears the value of the 'aFloat' field.
     *
     * @return This builder.
     */
    public cascading.avro.test5.Builder clearAFloat() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
     * Gets the value of the 'aDouble' field.
     *
     * @return The value.
     */
    public double getADouble() {
      return aDouble;
    }


    /**
     * Sets the value of the 'aDouble' field.
     *
     * @param value The value of 'aDouble'.
     * @return This builder.
     */
    public cascading.avro.test5.Builder setADouble(double value) {
      validate(fields()[4], value);
      this.aDouble = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
     * Checks whether the 'aDouble' field has been set.
     *
     * @return True if the 'aDouble' field has been set, false otherwise.
     */
    public boolean hasADouble() {
      return fieldSetFlags()[4];
    }


    /**
     * Clears the value of the 'aDouble' field.
     *
     * @return This builder.
     */
    public cascading.avro.test5.Builder clearADouble() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
     * Gets the value of the 'aString' field.
     *
     * @return The value.
     */
    public java.lang.CharSequence getAString() {
      return aString;
    }


    /**
     * Sets the value of the 'aString' field.
     *
     * @param value The value of 'aString'.
     * @return This builder.
     */
    public cascading.avro.test5.Builder setAString(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.aString = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
     * Checks whether the 'aString' field has been set.
     *
     * @return True if the 'aString' field has been set, false otherwise.
     */
    public boolean hasAString() {
      return fieldSetFlags()[5];
    }


    /**
     * Clears the value of the 'aString' field.
     *
     * @return This builder.
     */
    public cascading.avro.test5.Builder clearAString() {
      aString = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
     * Gets the value of the 'aBytes' field.
     *
     * @return The value.
     */
    public java.nio.ByteBuffer getABytes() {
      return aBytes;
    }


    /**
     * Sets the value of the 'aBytes' field.
     *
     * @param value The value of 'aBytes'.
     * @return This builder.
     */
    public cascading.avro.test5.Builder setABytes(java.nio.ByteBuffer value) {
      validate(fields()[6], value);
      this.aBytes = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
     * Checks whether the 'aBytes' field has been set.
     *
     * @return True if the 'aBytes' field has been set, false otherwise.
     */
    public boolean hasABytes() {
      return fieldSetFlags()[6];
    }


    /**
     * Clears the value of the 'aBytes' field.
     *
     * @return This builder.
     */
    public cascading.avro.test5.Builder clearABytes() {
      aBytes = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
     * Gets the value of the 'aFixed' field.
     *
     * @return The value.
     */
    public cascading.avro.md5 getAFixed() {
      return aFixed;
    }


    /**
     * Sets the value of the 'aFixed' field.
     *
     * @param value The value of 'aFixed'.
     * @return This builder.
     */
    public cascading.avro.test5.Builder setAFixed(cascading.avro.md5 value) {
      validate(fields()[7], value);
      this.aFixed = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
     * Checks whether the 'aFixed' field has been set.
     *
     * @return True if the 'aFixed' field has been set, false otherwise.
     */
    public boolean hasAFixed() {
      return fieldSetFlags()[7];
    }


    /**
     * Clears the value of the 'aFixed' field.
     *
     * @return This builder.
     */
    public cascading.avro.test5.Builder clearAFixed() {
      aFixed = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
     * Gets the value of the 'aList' field.
     *
     * @return The value.
     */
    public java.util.List<java.lang.Integer> getAList() {
      return aList;
    }


    /**
     * Sets the value of the 'aList' field.
     *
     * @param value The value of 'aList'.
     * @return This builder.
     */
    public cascading.avro.test5.Builder setAList(java.util.List<java.lang.Integer> value) {
      validate(fields()[8], value);
      this.aList = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
     * Checks whether the 'aList' field has been set.
     *
     * @return True if the 'aList' field has been set, false otherwise.
     */
    public boolean hasAList() {
      return fieldSetFlags()[8];
    }


    /**
     * Clears the value of the 'aList' field.
     *
     * @return This builder.
     */
    public cascading.avro.test5.Builder clearAList() {
      aList = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
     * Gets the value of the 'aMap' field.
     *
     * @return The value.
     */
    public java.util.Map<java.lang.CharSequence, java.lang.Integer> getAMap() {
      return aMap;
    }


    /**
     * Sets the value of the 'aMap' field.
     *
     * @param value The value of 'aMap'.
     * @return This builder.
     */
    public cascading.avro.test5.Builder setAMap(java.util.Map<java.lang.CharSequence, java.lang.Integer> value) {
      validate(fields()[9], value);
      this.aMap = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
     * Checks whether the 'aMap' field has been set.
     *
     * @return True if the 'aMap' field has been set, false otherwise.
     */
    public boolean hasAMap() {
      return fieldSetFlags()[9];
    }


    /**
     * Clears the value of the 'aMap' field.
     *
     * @return This builder.
     */
    public cascading.avro.test5.Builder clearAMap() {
      aMap = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
     * Gets the value of the 'aUnion' field.
     *
     * @return The value.
     */
    public java.lang.Integer getAUnion() {
      return aUnion;
    }


    /**
     * Sets the value of the 'aUnion' field.
     *
     * @param value The value of 'aUnion'.
     * @return This builder.
     */
    public cascading.avro.test5.Builder setAUnion(java.lang.Integer value) {
      validate(fields()[10], value);
      this.aUnion = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
     * Checks whether the 'aUnion' field has been set.
     *
     * @return True if the 'aUnion' field has been set, false otherwise.
     */
    public boolean hasAUnion() {
      return fieldSetFlags()[10];
    }


    /**
     * Clears the value of the 'aUnion' field.
     *
     * @return This builder.
     */
    public cascading.avro.test5.Builder clearAUnion() {
      aUnion = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public test5 build() {
      try {
        test5 record = new test5();
        record.aBoolean = fieldSetFlags()[0] ? this.aBoolean : (java.lang.Boolean) defaultValue(fields()[0]);
        record.anInt = fieldSetFlags()[1] ? this.anInt : (java.lang.Integer) defaultValue(fields()[1]);
        record.aLong = fieldSetFlags()[2] ? this.aLong : (java.lang.Long) defaultValue(fields()[2]);
        record.aFloat = fieldSetFlags()[3] ? this.aFloat : (java.lang.Float) defaultValue(fields()[3]);
        record.aDouble = fieldSetFlags()[4] ? this.aDouble : (java.lang.Double) defaultValue(fields()[4]);
        record.aString = fieldSetFlags()[5] ? this.aString : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.aBytes = fieldSetFlags()[6] ? this.aBytes : (java.nio.ByteBuffer) defaultValue(fields()[6]);
        record.aFixed = fieldSetFlags()[7] ? this.aFixed : (cascading.avro.md5) defaultValue(fields()[7]);
        record.aList = fieldSetFlags()[8] ? this.aList : (java.util.List<java.lang.Integer>) defaultValue(fields()[8]);
        record.aMap = fieldSetFlags()[9] ? this.aMap : (java.util.Map<java.lang.CharSequence, java.lang.Integer>) defaultValue(fields()[9]);
        record.aUnion = fieldSetFlags()[10] ? this.aUnion : (java.lang.Integer) defaultValue(fields()[10]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<test5>
          WRITER$ = (org.apache.avro.io.DatumWriter<test5>) MODEL$.createDatumWriter(SCHEMA$);

  @Override
  public void writeExternal(java.io.ObjectOutput out)
          throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<test5>
          READER$ = (org.apache.avro.io.DatumReader<test5>) MODEL$.createDatumReader(SCHEMA$);

  @Override
  public void readExternal(java.io.ObjectInput in)
          throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override
  protected boolean hasCustomCoders() {
    return true;
  }

  @Override
  public void customEncode(org.apache.avro.io.Encoder out)
          throws java.io.IOException {
    out.writeBoolean(this.aBoolean);

    out.writeInt(this.anInt);

    out.writeLong(this.aLong);

    out.writeFloat(this.aFloat);

    out.writeDouble(this.aDouble);

    if (this.aString == null) {
      out.writeIndex(1);
      out.writeNull();
    } else {
      out.writeIndex(0);
      out.writeString(this.aString);
    }

    out.writeBytes(this.aBytes);

    out.writeFixed(this.aFixed.bytes(), 0, 16);

    long size0 = this.aList.size();
    out.writeArrayStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (java.lang.Integer e0 : this.aList) {
      actualSize0++;
      out.startItem();
      out.writeInt(e0);
    }
    out.writeArrayEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");

    long size1 = this.aMap.size();
    out.writeMapStart();
    out.setItemCount(size1);
    long actualSize1 = 0;
    for (java.util.Map.Entry<java.lang.CharSequence, java.lang.Integer> e1 : this.aMap.entrySet()) {
      actualSize1++;
      out.startItem();
      out.writeString(e1.getKey());
      java.lang.Integer v1 = e1.getValue();
      out.writeInt(v1);
    }
    out.writeMapEnd();
    if (actualSize1 != size1)
      throw new java.util.ConcurrentModificationException("Map-size written was " + size1 + ", but element count was " + actualSize1 + ".");

    if (this.aUnion == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.aUnion);
    }

  }

  @Override
  public void customDecode(org.apache.avro.io.ResolvingDecoder in)
          throws java.io.IOException {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.aBoolean = in.readBoolean();

      this.anInt = in.readInt();

      this.aLong = in.readLong();

      this.aFloat = in.readFloat();

      this.aDouble = in.readDouble();

      if (in.readIndex() != 0) {
        in.readNull();
        this.aString = null;
      } else {
        this.aString = in.readString(this.aString instanceof Utf8 ? (Utf8) this.aString : null);
      }

      this.aBytes = in.readBytes(this.aBytes);

      if (this.aFixed == null) {
        this.aFixed = new cascading.avro.md5();
      }
      in.readFixed(this.aFixed.bytes(), 0, 16);

      long size0 = in.readArrayStart();
      java.util.List<java.lang.Integer> a0 = this.aList;
      if (a0 == null) {
        a0 = new SpecificData.Array<java.lang.Integer>((int) size0, SCHEMA$.getField("aList").schema());
        this.aList = a0;
      } else a0.clear();
      SpecificData.Array<java.lang.Integer> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Integer>) a0 : null);
      for (; 0 < size0; size0 = in.arrayNext()) {
        for (; size0 != 0; size0--) {
          java.lang.Integer e0 = (ga0 != null ? ga0.peek() : null);
          e0 = in.readInt();
          a0.add(e0);
        }
      }

      long size1 = in.readMapStart();
      java.util.Map<java.lang.CharSequence, java.lang.Integer> m1 = this.aMap; // Need fresh name due to limitation of macro system
      if (m1 == null) {
        m1 = new java.util.HashMap<java.lang.CharSequence, java.lang.Integer>((int) size1);
        this.aMap = m1;
      } else m1.clear();
      for (; 0 < size1; size1 = in.mapNext()) {
        for (; size1 != 0; size1--) {
          java.lang.CharSequence k1 = null;
          k1 = in.readString(k1 instanceof Utf8 ? (Utf8) k1 : null);
          java.lang.Integer v1 = null;
          v1 = in.readInt();
          m1.put(k1, v1);
        }
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.aUnion = null;
      } else {
        this.aUnion = in.readInt();
      }

    } else {
      for (int i = 0; i < 11; i++) {
        switch (fieldOrder[i].pos()) {
          case 0:
            this.aBoolean = in.readBoolean();
            break;

          case 1:
            this.anInt = in.readInt();
            break;

          case 2:
            this.aLong = in.readLong();
            break;

          case 3:
            this.aFloat = in.readFloat();
            break;

          case 4:
            this.aDouble = in.readDouble();
            break;

          case 5:
            if (in.readIndex() != 0) {
              in.readNull();
              this.aString = null;
            } else {
              this.aString = in.readString(this.aString instanceof Utf8 ? (Utf8) this.aString : null);
            }
            break;

          case 6:
            this.aBytes = in.readBytes(this.aBytes);
            break;

          case 7:
            if (this.aFixed == null) {
              this.aFixed = new cascading.avro.md5();
            }
            in.readFixed(this.aFixed.bytes(), 0, 16);
            break;

          case 8:
            long size0 = in.readArrayStart();
            java.util.List<java.lang.Integer> a0 = this.aList;
            if (a0 == null) {
              a0 = new SpecificData.Array<java.lang.Integer>((int) size0, SCHEMA$.getField("aList").schema());
              this.aList = a0;
            } else a0.clear();
            SpecificData.Array<java.lang.Integer> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Integer>) a0 : null);
            for (; 0 < size0; size0 = in.arrayNext()) {
              for (; size0 != 0; size0--) {
                java.lang.Integer e0 = (ga0 != null ? ga0.peek() : null);
                e0 = in.readInt();
                a0.add(e0);
              }
            }
            break;

          case 9:
            long size1 = in.readMapStart();
            java.util.Map<java.lang.CharSequence, java.lang.Integer> m1 = this.aMap; // Need fresh name due to limitation of macro system
            if (m1 == null) {
              m1 = new java.util.HashMap<java.lang.CharSequence, java.lang.Integer>((int) size1);
              this.aMap = m1;
            } else m1.clear();
            for (; 0 < size1; size1 = in.mapNext()) {
              for (; size1 != 0; size1--) {
                java.lang.CharSequence k1 = null;
                k1 = in.readString(k1 instanceof Utf8 ? (Utf8) k1 : null);
                java.lang.Integer v1 = null;
                v1 = in.readInt();
                m1.put(k1, v1);
              }
            }
            break;

          case 10:
            if (in.readIndex() != 1) {
              in.readNull();
              this.aUnion = null;
            } else {
              this.aUnion = in.readInt();
            }
            break;

          default:
            throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










